splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
summary(yhat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat <- predict(lm(y ~ xMat - 1))
yhat <- predict(lm(y ~ xMat))
summary(yhat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
lm1 <- lm(y ~ xMat)
summary(lm1)
lm1 <- lm(y ~ xMat)
summary(lm1)
1.32-1.03
2.32-1.03
summary(sh)
summary(lm1)
summary(shm)
shm <- glm(formula = useNum ~ wind, family = "binomial", data = sh)
summary(shm)
exp(-0.03181)
shm <- glm(formula = useNum ~ wind+magn, family = "binomial", data = sh)
summary(shm)
exp(-3.201e-02)
summary(glm1)
exp(-0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(yhat)
lm <- lm(y ~ xMat - 1)
summary(lm)
splineTerms
xMat
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(splineTerms)
splineTerms
summary(yhat)
yhat
lm1 <- lm(y ~ xMat - 1)
summary(lm1)
plot(x,yhat)
xMat
4.8827566+0.1825806
5.065337/5
swirl()
library(swirl)
swirl()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(predictors)
ilpred <- predictors[,c(57,68)]
prcomp <- prComp(ilpred\)
prcomp <- prComp(ilpred)
library(caret)
prcomp <- prComp(ilpred)
prcomp <- prcomp(ilpred)
plot(prcomp$x[,1],prcomp$x[,2] )
plot(prcomp$x[,1],prcomp$x[,2], col=typeColor)
summary(prcomp)
View(adData)
mini <- cbind(ilpred, diagnosis)
inTrainmini <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
inTrainmini <- createDataPartition(mini$diagnosis, p=3/4)[[1]]
trmini <- mini[inTrain,]
temini <- mini[-inTrain,]
minimodfit <- train(training$type~.,method="glm", data=trmini)
minimodfit <- train(trmini$type~.,method="glm", data=trmini)
minimodfit <- train(trmini$diagnosis~.,method="glm", data=trmini)
summary(minimodfit)
confusionMatrix(temini$diagnosis, predict(minimodfit, temini))
prcomp
summary(prcomp)
View(adData)
names(adData)
View(predictors)
names(predictors)
View(ilpred)
View(ilpred)
ilpred <- predictors[,c(57,68)]
View(ilpred)
ilpred <- predictors[,c(57:68)]
prcomp <- prComp(ilpred)
prcomp <- prcomp(ilpred)
summary(prcomp)
minimodfit <- train(trmini$diagnosis~.,method="glm", data=trmini)
mini <- cbind(ilpred, diagnosis)
inTrainmini <- createDataPartition(mini$diagnosis, p=3/4)[[1]]
trmini <- mini[inTrain,]
temini <- mini[-inTrain,]
minimodfit <- train(trmini$diagnosis~.,method="glm", data=trmini)
confusionMatrix(temini$diagnosis, predict(minimodfit, temini))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
modFit <- train(Case~., method="rpart", data=training)
predict(modFit, TotalIntench2 = 23.000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 ))
predict(modFit, newdata=testing)
predict(modFit, newdata=test)
View(test)
View(training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
set.seed(125)
modFit <- train(Case~., method="rpart", data=training)
test <- segmentationOriginal[segmentationOriginal$Case=="Test",]
test <- segmentationOriginal[segmentationOriginal$Case=="Train",]
modFit <- train(Class~., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area~., method="rpart", data=olive)
predict(modFit, newdata=as.data.frame(t(colMeans(olive))))
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234 )
View(trainSA)
modFit <- train(chd ~ age + alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predicttrain <- predict(modFit, newdata=trainSA, type="response")
predicttrain <- predict(modFit, newdata=trainSA, type="prob")
summary(modFit)
predicttrain <- predict(modFit, newdata=trainSA)
predicttest <- predict(modFit, newdata=testSA)
predicttrain <- predict(modFit, newdata=trainSA, type="response")
predicttrain <- predict(modFit, newdata=trainSA, type="raw")
predicttrain <- predict(modFit, newdata=trainSA, type="prob")
predicttrain <- predict(modFit, newdata=trainSA, type="raw")
missClass
missClass(testSA$chd, predicttrain)
missClass(testSA$chd, predicttest)
missClass(trainSA$chd, predicttrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf")
modFit2 <- train(y~., data=vowel.train, method="gbm")
accuracy(modFit)
modFit$accuracy
summary(modFit)
modFit
modFit2
predictrf <- predict(modFit, vowel.test)
predictrf
View(vowel.test)
sum(predictrf==vowel.test$y)
280/462
predictrf <- predictgbm(modFit2, vowel.test)
predictgbm <- predict(modFit2, vowel.test)
sum(predictgbm==vowel.test$y)
245/462
which(predictgbm==predictrf)
sum(predictgbm[which(predictgbm==predictrf)]==vowel.test$y)
sum(predictgbm[which(predictgbm==predictrf)]==vowel.test$y[which(predictgbm==predictrf)])
sum(predictgbm[which(predictgbm==predictrf)])
len([which(predictgbm==predictrf)])
len(which(predictgbm==predictrf)])
len(which(predictgbm==predictrf))
length(which(predictgbm==predictrf))
207/321
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433 )
set.seed(62433)
trainrf <- modFit(diagnosis~., type="rf", data="training")
trainrf <- train(diagnosis~., type="rf", data="training")
trainrf <- train(diagnosis~., type="rf", data=training)
traingbm <- train(diagnosis~., type="gbm", data=training)
traingbm <- train(diagnosis~., type="lda", data=training)
traingbm
trainrf
trainlda <- train(diagnosis~., type="lda", data=training)
predDF <- data.frame(trainrf, traingbm, trainlda)
predrf <- predict(trainrf, testing)
predgbm <- predict(traingbm, testing)
predlda <- predict(trainlda, testing)
predDF <- data.frame(trainrf, traingbm, trainlda, diagnosis=testing$diagnosis)
predDF <- data.frame(predrf, predgbm, predlda, diagnosis=testing$diagnosis)
combrf <- train(diagnosis~., method="rf", data=predDF)
confusionMatrix(predgbm)
confusionMatrix(predgbm, testing)
confusionMatrix(predgbm, testing$diagnosis)
confusionMatrix(predrf, testing$diagnosis)
confusionMatrix(predlda, testing$diagnosis)
confusionMatrix(combrf, testing$diagnosis)
combrf
predcomb <- predict(combrf, testing)
confusionMatrix(combrf, testing$diagnosis)
confusionMatrix(predcomb, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(concrete)
modFit <- train(CompressiveStrength~., method="lasso", data=training)
modFit <- train(CompressiveStrength~., method="lasso", data=training)
modFit
?plot.enet
class(modFit)
summary(modFit)
plot.enet(x=modFit)
modFit$tuneValue
modFit$vn
modFit$obsLevels
plot.enet(modFit)
train(CompressiveStrength~., method="lasso", data=training)
modFit$parameters
modFit$parameter
modFit$modelInfo
modFit$modelInfo$parameters
enet(modFit)
modelInfo$library
modFit$modelInfo$library
modFit$modelInfo$fit
summary(modFit)
modFit$lambda
modFit$mu
modFit$beta.pure
modFit$L1norm
plot(modFit)
plot(modFit)
?enet
data(diabetes)
attach(diabetes)
object1 <- enet(x,y,lambda=0)
plot(object1)
View(diabetes)
View(diabetes)
modFit$modelInfo$parameters
modFit$loop
modFit$modelInfo$fit
modFit$fit
modFit$modelInfo$loop
modFit$results
modFit$index
summary(modFit)
modFit$control$indexOut
modFit$control$index
download.file(https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile="gaData.csv")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength~., method="lasso", data=training)
View(training)
modFit$coefnames
modFit$coefnames
?lasso
modfit2 <- enet(training[1:-1], training$CompressiveStrength,lambda=0)
modfit2 <- enet(training[1:8], training$CompressiveStrength,lambda=0)
modfit2 <- enet(training[,1:8], training$CompressiveStrength,lambda=0)
modfit2 <- enet(x=training$Water, y=training$CompressiveStrength,lambda=0)
modfit2 <- enet(x=training[,1:8], y=training$CompressiveStrength,lambda=0)
sapply(training, class)
training$Age <- as.numeric(training$Age)
modfit2 <- enet(x=training[,1:8], y=training$CompressiveStrength,lambda=0)
data(diabetes)
attach(diabetes)
object1 <- enet(x,y,lambda=0)
plot(object1)
View(diabetes)
object1 <- enet(x=training$Superplasticizer,y=training$CompressiveStrength,lambda=0)
object1 <- enet(x=training$Water,y=training$CompressiveStrength,lambda=0)
object1 <- enet(x=training[, 7:8],y=training$CompressiveStrength,lambda=0)
gaData <- read.csv("~/TrueDocs/projects/gaData.csv")
View(gaData)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat <- gaData
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
?bats
library(forecast)
?bats
View(dat)
bats(dat)
bats(dat$visitsTumblr)
bTumb <-bats(data)
bTumb <-bats(dat$visitsTumblr)
bTumb <-bats(dat$visitsTumblr)
bTumb <-bats(training$visitsTumblr)
bTumb <-bats(tstrain)
install.packages("Rtools")
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
find_rtools()
colSums()
dgamma
predict
lm
colSums
?predict
?lm
?dgamma
?colSums
setwd("~/TrueDocs/projects/data science specialisation")
library(shiny)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
plot(dpois(lambda=0.2))
plot(dpois(x=1:10, lambda=0.2))
plot(dpois(x=1:10, lambda=0))
plot(hist(rpois(10000, lambda=0))
)
plot(hist(rpois(10000, lambda=0.2)))
plot(hist(rpois(400, lambda=0.2)))
plot(dpois(x=1:10, lambda=-0.2))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?rpois
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
hist(rpois(5,0.2), xlab='child height', col='lightblue',main='Histogram')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
n=10
lambda=0
rpois(10,0)
hist(rpois(10,0))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sliderInput
shiny::runApp()
shiny::runApp()
?cut2
x <- rpois(10000, 0.2)
library(ggplot2)
qplot(x)
shiny::runApp()
p <- ggplot(x, aes(x)) + geom_hist()
p <- ggplot(as.data.frame(x), aes(x)) + geom_hist()
p <- ggplot(as.data.frame(x), aes(x)) + geom_bar()
p
p <- ggplot(as.data.frame(x), aes(x, fill=x)) + geom_bar() + theme_bw()
p
x <- as.data.frame(rpois(n, lambda))
View(x)
x <- as.data.frame(x=rpois(n, lambda))
x <- as.data.frame(x=rpois(n, lambda))
View(x)
shiny::runApp()
x <- data.frame(x=rpois(n, lambda))
View(x)
p <- ggplot(x, aes(x$x)) + geom_bar(fill=x$x) + theme_bw()
p
p <- ggplot(x, aes(x)) + geom_bar(fill=x$x) + theme_bw()
p
p <- ggplot(x, aes(x)) + geom_bar(fill=x) + theme_bw()
p
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode='showcase')
shiny::runApp()
shiny::runApp()
table(x)
tapply(x, a, count(a))
tapply(x, a, which(a))
tapply(x, a, mean())
tapply(x, a, mean)
tapply(x$a, a, mean)
tapply(x$a, x$a, mean)
tapply(x$a, as.factor(x$a), mean)
length(which(x$a==0))
length(which(x$a==1))
View(x)
length(which(x$x==0))
tapply(x$x, as.factor(x$x), mean)
tapply(x$x, as.factor(x$x), count)
shiny::runApp()
x <- data.frame(x=c(rep(1,10), rep(0,9), rep(2,3)))
View(x)
tapply(x$x, levels(as.factor(x$x)), mean)
shiny::runApp()
shiny::runApp()
sumtable <- data.frame()
for (i in levels(as.factor(x$a))  {print(i)}
for (i in levels(as.factor(x$a))  print(i)
for (i in levels(as.factor(x$a)))  {print(i)}
for (i in levels(as.factor(x$a)))  {i}
for (i in levels(as.factor(x$x)))  {i}
for (i in levels(as.factor(x$x)))  {print(i)}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderTable
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='ikorneta', token='9ADBA17534B856A17D730F013A873CF1', secret='VR01FSE5brGlCZhBjHSO9FIFDvsXmTHCisB49+Ng')
library(shinyapps)
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='ikorneta', token='9ADBA17534B856A17D730F013A873CF1', secret='VR01FSE5brGlCZhBjHSO9FIFDvsXmTHCisB49+Ng')
deployApp()
setwd("~/TrueDocs/projects/data science specialisation/PoissonApp")
deployApp()
shiny::runApp()
deployApp()
